name: Validate Contributions and Ownership

on:
    pull_request:
        types: [opened, synchronize]

jobs:
    validate:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4 # Updated to the latest version

            - name: Fetch main branch changes
              run: git fetch origin main

            - name: Fetch pull request changes
              run: git fetch origin pull/${{ github.event.pull_request.number }}/head:pr_branch

            - name: Get PR branch name
              id: pr_branch_name
              run: echo "branch_name=$(git rev-parse --abbrev-ref pr_branch)" >> $GITHUB_ENV # Updated to use environment files

            - name: Diff changes
              run: git diff --name-status origin/main...${{ env.branch_name }} > diff_output.txt

            - name: Check for unauthorized chainId folder creation
              run: |
                  CHAIN_ID_REGEX='^[0-9]+$'
                  TOKEN_ADDRESS_REGEX='^0x[a-fA-F0-9]{40}$'

                  while IFS=$'\t' read -r status file; do
                    IFS='/' read -r -a path_parts <<< "$file"

                    if [[ ${#path_parts[@]} -eq 1 ]]; then
                      if [[ ${path_parts[0]} =~ $CHAIN_ID_REGEX ]]; then
                        echo "Unauthorized creation of chainId folder: ${path_parts[0]}"
                        exit 1
                      fi
                    fi

                    if [[ ${#path_parts[@]} -eq 2 ]]; then
                      if [[ ! ${path_parts[1]} =~ $TOKEN_ADDRESS_REGEX ]]; then
                        echo "Invalid token address folder: ${path_parts[1]}"
                        exit 1
                      fi
                    fi
                  done < diff_output.txt

            - name: Check for unauthorized file modifications
              run: |
                  while IFS=$'\t' read -r status file; do
                    IFS='/' read -r -a path_parts <<< "$file"

                    # Ensure only files inside token_address folders are modified
                    if [[ ${#path_parts[@]} -eq 2 && $status != "A" ]]; then
                      echo "Files can only be modified inside token_address folders"
                      exit 1
                    fi

                    # Ensure only the creator of the folder can modify or add files to it
                    if [[ ${#path_parts[@]} -ge 2 ]]; then
                      folder_creator=$(git log --pretty=format:"%an" --reverse -- "${path_parts[0]}/${path_parts[1]}" | head -n 1)
                      pr_author=$(jq -r '.pull_request.user.login' "$GITHUB_EVENT_PATH")
                      if [[ "$folder_creator" != "$pr_author" ]]; then
                        echo "Unauthorized modification by $pr_author in folder: ${path_parts[0]}/${path_parts[1]}"
                        exit 1
                      fi
                    fi

                    # Ensure only valid files are added
                    if [[ ${#path_parts[@]} -eq 3 ]]; then
                      case "${path_parts[2]}" in
                        info.json)
                          if ! jq empty "$file"; then
                            echo "Invalid JSON format: $file"
                            exit 1
                          fi
                          ;;
                        logo.svg)
                          if ! file "$file" | grep -q 'SVG'; then
                            echo "Invalid logo file: $file"
                            exit 1
                          fi
                          ;;
                        *)
                          echo "Unexpected file: ${path_parts[2]}"
                          exit 1
                          ;;
                      esac
                    fi
                  done < diff_output.txt

            - name: Ensure no files are added to the chainId folder path
              run: |
                  while IFS=$'\t' read -r status file; do
                    IFS='/' read -r -a path_parts <<< "$file"
                    if [[ ${#path_parts[@]} -eq 1 ]]; then
                      echo "Files cannot be added directly to the chainId folder path"
                      exit 1
                    fi
                  done < diff_output.txt

            - name: Auto-merge PR
              if: success()
              uses: actions/github-script@v6
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const pull_number = context.payload.pull_request.number;
                      const response = await github.rest.pulls.merge({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: pull_number,
                        merge_method: 'squash'
                      });
                      console.log(response);
